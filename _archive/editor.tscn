[gd_scene load_steps=3 format=3 uid="uid://bd3lsapg066xa"]

[sub_resource type="GDScript" id="GDScript_7j62l"]
script/source = "# this script is from:
# 	https://codeberg.org/sossees/simplest-paint-in-godot-4
# licensed with MIT License:
# 	https://codeberg.org/sosasees/mit-license/raw/branch/2021/LICENSE
extends TextureRect


@export var picture_size : Vector2i = Vector2i(10000, 5000)
@export var padding : int = 64
@export var brush_radius : Vector2i = Vector2i(4, 4)
@export var line_tween_points : int = 128
@export var brush_color : Color = Color('020202')

var canvas_image : Image
var canvas_texture : ImageTexture
var brush_image : Image

var update_canvas : Callable = func() -> void:
	canvas_texture = ImageTexture.create_from_image(canvas_image)
	texture = canvas_texture

var line : PackedVector2Array

@warning_ignore(\"shadowed_variable_base_class\")
var draw_dot : Callable = func(position:Vector2i) -> void:
	canvas_image.fill_rect(
		Rect2i(position - brush_radius, brush_radius*2),
		brush_color
	)
var draw_line : Callable = func() -> void:
	for i in line_tween_points: # could be changed to a parallel for loop
		draw_dot.call(
			lerp( line[-1], line[-2], float(i+1)/(line_tween_points+1) )
		)


func _ready() -> void:
	canvas_image = Image.create(
		picture_size.x + padding*2, picture_size.y + padding*2,
		false, Image.FORMAT_RGBA8
	)
	update_canvas.call()


func _gui_input(event) -> void:
	if (event is InputEventMouse and event.get_button_mask() == 1) \\
			or event is InputEventScreenDrag:
		line.append( event.get_position() )
		if line.size() > 0:
			draw_dot.call(line[-1])
			if line.size() > 1:
				draw_line.call()
		update_canvas.call()
	else:
		line.clear()
"

[sub_resource type="GDScript" id="GDScript_xevmy"]
script/source = "# this script is from:
# 	https://codeberg.org/sossees/simplest-paint-in-godot-4
# licensed with MIT License:
# 	https://codeberg.org/sosasees/mit-license/raw/branch/2021/LICENSE
extends Button


@export var canvas : TextureRect
@export_file var save_path : String = 'res://saved.png'

var image : Image
var picture_size : Vector2i
var canvas_padding : int


func _ready() -> void:
	if not OS.has_feature('editor'):
		queue_free()
	image = canvas.canvas_image
	picture_size = canvas.picture_size
	canvas_padding = canvas.padding


func save_picture( path:String ) -> void:
	var save_image : Image = Image.create(
		picture_size.x, picture_size.y, false, Image.FORMAT_RGBA8
	)
	save_image.blit_rect(
		image,
		Rect2i(Vector2i(canvas_padding, canvas_padding), picture_size),
		Vector2i.ZERO
	)
	save_image.save_png(path)


func _pressed() -> void:
	save_picture(save_path)
"

[node name="Editor" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Background" type="ColorRect" parent="."]
custom_minimum_size = Vector2(512, 512)
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -576.0
offset_top = -324.0
offset_right = 576.0
offset_bottom = 324.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0.890196, 0.890196, 0.890196, 1)

[node name="Canvas" type="TextureRect" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_7j62l")

[node name="SaveButton" type="Button" parent="." node_paths=PackedStringArray("canvas")]
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -4.0
offset_top = -8.0
offset_right = 4.0
grow_horizontal = 2
grow_vertical = 0
text = "Save"
script = SubResource("GDScript_xevmy")
canvas = NodePath("../Canvas")

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2(576, 324)
zoom = Vector2(0.1, 0.1)
